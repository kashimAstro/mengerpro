// http://www.fractalforums.com/3d-fractal-generation/kaleidoscopic-%28escape-time-ifs%29/

uniform vec3 resol;
uniform float time;
uniform vec4 mouse;

#define MaxSteps 40
#define MinimumDistance 0.0011
#define normalDistance  0.0009

const int Iterations    = 7;
const float Scale       = 3.0;
const float FieldOfView = 1.0;
const float Jitter      = 0.02;
const float FudgeFactor = 0.7;
const float Ambient     = 0.32184;
const float Diffuse     = 1.1;
const vec3 LightDir     = vec3(1.1);
const vec3 LightColor   = vec3(1.0,1.0,0.858824);
const vec3 LightDir2    = vec3(1.0,-1.0,1.0);
const vec3 LightColor2  = vec3(0.0,0.333333,1.0);
const vec3 Offset       = vec3(0.92858,0.92858,0.32858);

vec2 rotate(vec2 v, float a) {
        return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);
}

vec3 light(in vec3 color, in vec3 normal, in vec3 dir) {
        vec3 lightDir = normalize(LightDir);
        float diffuse = max(0.0,dot(-normal, lightDir));
        vec3 lightDir2 = normalize(LightDir2);
        float diffuse2 = max(0.0,dot(-normal, lightDir2));
        return (diffuse*Diffuse)*(LightColor*color) + (diffuse2*Diffuse)*(LightColor2*color);
}

float DE(in vec3 z) {
        z  = abs(1.0-mod(z,2.0));
        float d = 1000.0;
        for (int n = 0; n < Iterations; n++) {
                z.xy = rotate(z.xy,4.0+2.0*cos(mouse.x/8.0));
                z = abs(z);
                if (z.x<z.y){ z.xy = z.yx;}
                if (z.x< z.z){ z.xz = z.zx;}
                if (z.y<z.z){ z.yz = z.zy;}
                z = Scale*z-Offset*(Scale-1.0);
                if( z.z<-0.5*Offset.z*(Scale-1.0))  z.z+=Offset.z*(Scale-1.0);
                d = min(d, length(z) * pow(Scale, float(-n)-1.0));
        }
        return d-0.001;
}

vec3 normal(in vec3 pos) {
        vec3 e = vec3(0.0,normalDistance,0.0);
        return normalize(vec3(
                        DE(pos+e.yxx)-DE(pos-e.yxx),
                        DE(pos+e.xyx)-DE(pos-e.xyx),
                        DE(pos+e.xxy)-DE(pos-e.xxy)
                        )
                );
}

vec3 color(vec3 normal, vec3 pos) {
        return vec3(1.);
}

float rand(vec2 co){
        return fract(cos(dot(co,vec2(4.898,7.23))) * 23421.631);
}

vec4 ray(in vec3 from, in vec3 dir) {
        float totalDistance = Jitter*rand(gl_FragCoord.xy+vec2(mouse.y));
        vec3 dir2 = dir;
        float distance;
        int steps = 0;
        vec3 pos;
        for (int i=0; i < MaxSteps; i++) {
                dir.zy = rotate(dir2.zy,totalDistance*cos(mouse.x/4.0)*2.0);
                pos = from + totalDistance * dir;
                distance = DE(pos)*FudgeFactor;
                totalDistance += distance;
                if (distance < MinimumDistance) break;
                steps = i;
        }
        float smoothStep =   float(steps) + distance/MinimumDistance;
        float ao = 1.1-smoothStep/float(MaxSteps);
        vec3 normal = normal(pos-dir*normalDistance*3.0);
        vec3 color = color(normal, pos);
        vec3 xlight = light(color, normal, dir);
        color = (color*Ambient+xlight)*ao;
        return vec4(color,1.0);
}

void main(void)
{
        vec3 camPos = 0.5*time*vec3(1.0,0.0,0.0);
        vec3 target = camPos+vec3(1.0,0.0*cos(time),0.0*sin(0.4*time));
        vec3 camUp  = vec3(0.0,1.0,0.0);
        vec3 camDir = normalize(target-camPos);
        camUp = normalize(camUp-dot(camDir,camUp)*camDir*time);
        vec3 camRight = normalize(cross(camDir,camUp));
        vec2 coord =-1.0+2.0*gl_FragCoord.xy/resol.xy;
        coord.x *= resol.x/resol.y;
        vec3 rayDir = normalize(camDir+(coord.x*camRight+coord.y*camUp)*FieldOfView);
        gl_FragColor = ray(camPos,rayDir);
}
